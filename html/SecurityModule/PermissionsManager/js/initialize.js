// Generated by CoffeeScript 1.10.0
(function() {
  var constsExt,
    slice = [].slice;

  constsExt = function($, parent) {
    var URLHighlightOverlay, afterWaits, my, openOdfContextmenu, urlmatch;
    my = parent.consts = {};
    my.codeMirrorSettings = {
      mode: "text/xml",
      lineNumbers: true,
      lineWrapping: true
    };
    my.icon = {
      objects: "glyphicon glyphicon-tree-deciduous",
      object: "glyphicon glyphicon-folder-open",
      infoitem: "glyphicon glyphicon-apple",
      metadata: "glyphicon glyphicon-info-sign"
    };
    my.addOdfTreeNode = function(parent, path, name, treeTypeName, callback) {
      var tree;
      if (callback == null) {
        callback = null;
      }
      tree = WebOmi.consts.odfTree;
      return tree.create_node(parent, {
        id: path,
        text: name,
        type: treeTypeName
      }, "first", function(node) {
        tree.open_node(parent, null, 500);
        if (callback != null) {
          callback(node);
        }
        return tree.select_node(node);
      });
    };
    openOdfContextmenu = function(target) {

      return {

        set_read: {
          label: "Set read",
          icon: "glyphicon glyphicon-book",
          action: function(data) {
            tree = WebOmi.consts.odfTree;
            parent = tree.get_node(data.reference);

            var hasRead = (parent.text.indexOf(WebOmi.formLogic.chars.readChar) > -1);
            var hasWrite = (parent.text.indexOf(WebOmi.formLogic.chars.writeChar) > -1);
            var newText = null;

            if (hasRead)
              return;

            $("#nodetree").jstree('deselect_node', parent);

            if (hasWrite)
              newText = parent.text.replace(WebOmi.formLogic.chars.writeChar, WebOmi.formLogic.chars.readChar);
            else
              newText = parent.text+WebOmi.formLogic.chars.readChar;

            newText = newText.replace(WebOmi.formLogic.chars.deleteChar,'');
            $("#nodetree").jstree('rename_node', parent,  newText);
            $("#nodetree").jstree('select_node', parent);
          },
        },
        set_write: {
          label: "Set read-write",
          icon: "glyphicon glyphicon-pencil",
          action: function(data) {
            tree = WebOmi.consts.odfTree;
            parent = tree.get_node(data.reference);

            var hasRead = (parent.text.indexOf(WebOmi.formLogic.chars.readChar) > -1);
            var hasWrite = (parent.text.indexOf(WebOmi.formLogic.chars.writeChar) > -1);
            var newText = null;

            if (hasWrite)
              return;

            $("#nodetree").jstree('deselect_node', parent);

            if (hasRead)
              newText = parent.text.replace(WebOmi.formLogic.chars.readChar, WebOmi.formLogic.chars.writeChar);
            else
              newText = parent.text+WebOmi.formLogic.chars.writeChar;

            newText = newText.replace(WebOmi.formLogic.chars.deleteChar,'');
            $("#nodetree").jstree('rename_node', parent,  newText);
            $("#nodetree").jstree('select_node', parent);
          }
        },
        del_rule: {
          label: "Delete rule",
          icon: "glyphicon glyphicon-trash",
          action: function(data) {

            tree = WebOmi.consts.odfTree;
            parent = tree.get_node(data.reference);

            var hasRead = (parent.text.indexOf(WebOmi.formLogic.chars.readChar) > -1);
            var hasWrite = (parent.text.indexOf(WebOmi.formLogic.chars.writeChar) > -1);
            var hasDelete = (parent.text.indexOf(WebOmi.formLogic.chars.deleteChar) > -1);
            var newText = parent.text;

            if (hasDelete)
              return;

            $("#nodetree").jstree('deselect_node', parent);

            if (hasRead)
              newText = parent.text.replace(WebOmi.formLogic.chars.readChar,'');
            else if (hasWrite)
              newText = parent.text.replace(WebOmi.formLogic.chars.writeChar,'');

            newText += WebOmi.formLogic.chars.deleteChar;
            $("#nodetree").jstree('rename_node', parent,  newText);
            $("#nodetree").jstree('select_node', parent);
          }
        },
      };
    };
    my.odfTreeSettings = {
      plugins: ["checkbox", "types", "contextmenu"],
      core: {
        error: function(msg) {
          return WebOmi.debug(msg);
        },
        force_text: true,
        check_callback: true
      },

      types: {
        "default": {
          icon: "odf-objects " + my.icon.objects,
          valid_children: ["object"]
        },
        object: {
          icon: "odf-object " + my.icon.object,
          valid_children: ["object", "infoitem"]
        },
        objects: {
          icon: "odf-objects " + my.icon.objects,
          valid_children: ["object"]
        },
        infoitem: {
          icon: "odf-infoitem " + my.icon.infoitem,
          valid_children: ["metadata"]
        },
        metadata: {
          icon: "odf-metadata " + my.icon.metadata,
          valid_children: []
        }
      },
      checkbox: {
        three_state: false,
        keep_selected_style: true,
        cascade: "up+undetermined",
        tie_selection: true,
        // whole_node: false
      },
      contextmenu: {
        show_at_node: true,
        items: openOdfContextmenu,
        select_node: false
      }
    };
    afterWaits = [];
    my.afterJquery = function(fn) {
      return afterWaits.push(fn);
    };
    urlmatch = /^(https?|ftp):\/\/(((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:)*@)?(((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]))|((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?)(:\d*)?)(\/((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)+(\/(([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)*)*)?)?(\?((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|[\uE000-\uF8FF]|\/|\?)*)?(\#((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|\/|\?)*)?(?:<|"|\s|$)/i;
    URLHighlightOverlay = {
      token: function(stream, state) {
        if (stream.match(urlmatch)) {
          stream.backUp(1);
          return "link";
        }
        while ((stream.next() != null) && !stream.match(urlmatch, false)) {
          null;
        }
        return null;
      }
    };
    $(function() {
      var basicInput, fn, i, language, len, loc, requestTip, responseCMSettings, results, v, validators;
      responseCMSettings = $.extend({
        readOnly: true
      }, my.codeMirrorSettings);
      my.requestCodeMirror = CodeMirror.fromTextArea($("#requestArea")[0], my.codeMirrorSettings);
      my.responseCodeMirror = CodeMirror.fromTextArea($("#responseArea")[0], responseCMSettings);
      my.responseDiv = $('.response .CodeMirror');
      my.responseDiv.hide();
      my.responseCodeMirror.addOverlay(URLHighlightOverlay);
      $('.well.response').delegate(".cm-link", "click", function(event) {
        var url;
        url = $(event.target).text();
        return window.open(url, '_blank');
      });
      my.serverUrl = $('#targetService');
      my.odfTreeDom = $('#nodetree');
      // my.requestSelDom = $('.requesttree');
      // my.readAllBtn = $('#readall');
      my.sendBtn = $('#send');
      // Save permissions button
      my.saveBtn = $('#sendPerm');
      my.addUserBtn = $('#addUser');

      my.addGroupBtn = $('#groupAddButton');
      my.editGroupBtn = $('#groupEditButton');
      my.deleteGroupBtn = $('#groupDeleteButton');

      my.groupsSelect = $('#groupsSelect');
      my.groupsSelect.chosen({
        no_results_text: "Oops, nothing found!",
        width: "60%",
        placeholder_text_multiple: "select group"
      }).change(function() {

        var selectedValue = $(this).val();
        console.log("Selected:"+selectedValue);
        var disabled = (selectedValue == null);

        $('#groupEditButton').prop('disabled', disabled);
        $('#groupDeleteButton').prop('disabled', disabled);

        if (disabled == false) {
          WebOmi.formLogic.readRules(selectedValue);
        }

      });
      my.addUsersSelect = $('#addUsersSelect');
      my.addUsersSelect.chosen({
        no_results_text: "Oops, nothing found!",
        width: "100%",
        placeholder_text_multiple: "select users"
      });

      my.resetAllBtn = $('#resetall');
      my.progressBar = $('.response .progress-bar');
      loc = window.location.href;
      my.serverUrl.val("https://localhost/omi/");
      //my.serverUrl.val(loc.substr(0, loc.indexOf("html/")));
      my.odfTreeDom.jstree(my.odfTreeSettings);
      my.odfTree = my.odfTreeDom.jstree();
      my.odfTree.set_type('Objects', 'objects');

      my.validators = validators = {};
      validators.nonEmpty = function(s) {
        if (s !== "") {
          return s;
        } else {
          return null;
        }
      };
      validators.number = function(s) {
        var a;
        if (s == null) {
          return s;
        }
        a = s.replace(',', '.');
        if ($.isNumeric(a)) {
          return parseFloat(a);
        } else {
          return null;
        }
      };
      validators.integer = function(x) {
        if ((x != null) && x % 1 === 0) {
          return x;
        } else {
          return null;
        }
      };
      validators.greaterThan = function(y) {
        return function(x) {
          if ((x != null) && x > y) {
            return x;
          } else {
            return null;
          }
        };
      };
      validators.greaterThanEq = function(y) {
        return function(x) {
          if ((x != null) && x >= y) {
            return x;
          } else {
            return null;
          }
        };
      };
      validators.equals = function(y) {
        return function(x) {
          if ((x != null) && x === y) {
            return x;
          } else {
            return null;
          }
        };
      };
      validators.or = function() {
        var vs;
        vs = 1 <= arguments.length ? slice.call(arguments, 0) : [];
        return function(c) {
          var i, len, res, v;
          if (vs.length === 0) {
            return null;
          }
          for (i = 0, len = vs.length; i < len; i++) {
            v = vs[i];
            res = v(c);
            if (res != null) {
              return res;
            }
          }
          return null;
        };
      };
      validators.url = function(s) {
        if (urlmatch.test(s)) {
          return s;
        } else {
          return null;
        }
      };
      v = validators;
      basicInput = function(selector, validator) {
        if (validator == null) {
          validator = validators.nonEmpty;
        }
        return {
          ref: $(selector),
          get: function() {
            return this.ref.val();
          },
          set: function(val) {
            return this.ref.val(val);
          },
          validate: function() {
            var val, validatedVal, validationContainer;
            val = this.get();
            validationContainer = this.ref.closest(".form-group");
            validatedVal = validator(val);
            if (validatedVal != null) {
              validationContainer.removeClass("has-error").addClass("has-success");
            } else {
              validationContainer.removeClass("has-success").addClass("has-error");
            }
            return validatedVal;
          },
          bindTo: function(callback) {
            return this.ref.on("input", (function(_this) {
              return function() {
                return callback(_this.validate());
              };
            })(this));
          }
        };
      };
      my.ui = {
        odf: {
          ref: my.odfTreeDom,
          get: function() {
            return my.odfTree.get_selected();
          },
          set: function(vals, preventEvent) {
            var i, len, node, results;
            if (preventEvent == null) {
              preventEvent = true;
            }
            my.odfTree.deselect_all(true);
            if ((vals != null) && vals.length > 0) {
              results = [];
              for (i = 0, len = vals.length; i < len; i++) {
                node = vals[i];
                results.push(my.odfTree.select_node(node, preventEvent, false));
              }
              return results;
            }
          }
        },

        requestDoc: {
          ref: my.requestCodeMirror,
          get: function() {
            return WebOmi.formLogic.getRequest();
          },
          set: function(val) {
            return WebOmi.formLogic.setRequest(val);
          }
        }
      };
      language = window.navigator.userLanguage || window.navigator.language;
      if (!moment.localeData(language)) {
        language = "en";
      }

      my.afterJquery = function(fn) {
        return fn();
      };
      results = [];
      for (i = 0, len = afterWaits.length; i < len; i++) {
        fn = afterWaits[i];
        results.push(fn());
      }
      return results;
    });
    return parent;
  };

  window.WebOmi = constsExt($, window.WebOmi || {});

  window.WebOmi.error = function() {
    var msgs;
    msgs = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    return alert(msgs.join(", "));
  };

  window.WebOmi.debug = function() {
    var msgs;
    msgs = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    return console.log.apply(console, msgs);
  };

  window.jqesc = function(mySel) {
    return '#' + mySel.replace(/(\[|\]|!|"|#|\$|%|\'|\(|\)|\*|\+|\,|\.|\/|\:|\;|\?|@)/g, "\\$1").replace(/( )/g, "_");
  };

  window.idesc = function(myId) {
    return myId.replace(/( )/g, "_");
  };

  String.prototype.trim = String.prototype.trim || function() {
    return String(this).replace(/^\s+|\s+$/g, '');
  };

}).call(this);
